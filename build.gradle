import org.gradle.internal.os.OperatingSystem

description = "Mini Java Compiler"

apply plugin: 'java'
apply plugin: 'application'
apply from: file('gradle/idea.gradle')

mainClassName = "edu.rosehulman.csse.mjc.Compiler"

ext.versions = [
        slf4j  : "1.7.2",
        logback: "1.0.9",
        junit  : "4.10"
]

ext.antlr = [
        grammarpackage: "edu.rosehulman.csse.mjc",
        antlrSource   : "src/main/antlr",
        destinationDir: "src/generated-sources/java"
]

repositories {
    mavenCentral()
}

configurations {
    antlr4 {
        description = "ANTLR4"
    }
}

dependencies {
    compile group: "org.slf4j", name: "slf4j-api", version: versions.slf4j

    compile group: "ch.qos.logback", name: "logback-classic", version: versions.logback

    compile group: "org.antlr", name: "antlr4-runtime", version: "4.+"
    // http://jcommander.org/#Overview
    compile "com.beust:jcommander:1.48"
    antlr4 group: "org.antlr", name: "antlr4", version: "4.+"
    testCompile group: "junit", name: "junit", version: versions.junit
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}

task antlrOutputDir << {
    mkdir(antlr.destinationDir)
}

def getOsString() {
    def os = OperatingSystem.current()
    def osString = null
    if (os.isWindows()) {
        throw new GradleException('Windows is not supported')
    } else if (os.isLinux()) {
        osString = "ubuntu"
    } else if (os.isMacOsX()) {
        osString = "darwin"
    }
    return osString;
}

// Compiler test doesn't work on travis :(
test {
    exclude '**/CompilerTest.class'
}

task runAndExec(dependsOn: run, type: Exec) {
    // Assumes file is called out.ll in build
    // Eventually this would be nice to be configurable a flag
    // to name the input and output, etc. This is good for now.
    def osString = getOsString()
    commandLine "${projectDir}/src/main/resources/bin/${osString}/lli", "${buildDir}/out.ll"
}


task execLL(type: Exec) {
    // set the file like
    // gradle execLL -Pfile=test.ll
    def osString = getOsString()
    def f = project.hasProperty('file') ? project.file : "test.ll"
    commandLine "${projectDir}/src/main/resources/bin/${osString}/lli", "${buildDir}/${f}"
}


task cToLLVM(type: Exec) {
    // Assumes file is called test.c in test/resources
    // Eventually this would be nice to be configurable a flag
    // to name the input and output, etc. This is good for now.
    def osString = getOsString()
    commandLine "${projectDir}/src/main/resources/bin/${osString}/clang",
            "-cc1",
            "${projectDir}/src/test/resources/test.c",
            "-emit-llvm",
            "-o", "${buildDir}/test.ll"
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    description = 'Generates Java sources from ANTLR4 grammars.'

    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)

    def grammars = fileTree(antlr.antlrSource).include('**/*.g4')

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    args = ["-o", "${antlr.destinationDir}/${pkg}"/*, "-atn"*/, "-visitor", "-package", antlr.grammarpackage, grammars.files].flatten()
}

compileJava {
    dependsOn generateGrammarSource
    source antlr.destinationDir
}

clean {
    delete antlr.destinationDir
}